; move all turtles
to move
    set tick-counter tick-counter + 1
    if tick-counter >= (31 - speed)
    [
      set tick-counter 0
      set cycle-counter cycle-counter + 1
      move-turtles
    ]
    tick
end

; move turtles through their path
to move-turtles
  ask turtles
  [
    if length path-to-go != 0 and cycle-counter > departure-time
    [
      set time-spent time-spent + 1
    ]
    ifelse length path-to-go != 0 and cycle-counter > (departure-time + platoonDelay)
    [
      set is-moving true
      go-to-next-patch-in-current-path
    ]
    [
      set is-moving false
      set color red
      set label ""
    ]
  ]
end

to go-to-next-patch-in-current-path
  face first path-to-go
  repeat 10
  [
    fd 0.1
  ]
  move-to first path-to-go
  set path-to-go remove-item 0 path-to-go
  let pid platoonID
  ifelse is-platooning and count (turtles-here with [ platoonID = pid ]) > 1
  [
    set fuel-spent fuel-spent + 0.75
    set color green
    set label count (turtles-here with [ platoonID = pid ])
  ]
  [
    set fuel-spent fuel-spent + 1
    set color red
    set label ""
  ]
end

to reset
  set time-spent 0
  set fuel-spent 0
  set cycle-counter 0
  set is-platooning false
  ask turtles
  [
    move-to origin
    set path-to-go path
    set platoonID 0
    set platoonDelay 0
  ]
end
