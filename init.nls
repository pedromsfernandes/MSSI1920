; populate cities with tucks
to populate
  set company_vals matrix:from-row-list [ [0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0] [0 0 0 0] ]
  let company_coef matrix:from-row-list [ [0.5 1.5] [0.75 1.25] [1 1] [1.25 0.75] [1.5 0.5] ]
  let company_color (list red orange green yellow magenta)
  ask patches
  [
    set plabel ""
  ]
  ask turtles
  [
    die
  ]
  repeat n-trucks [
    ask one-of patches with [pcolor = blue]
    [
      sprout 1
      [
        set label-color black
        set origin patch-here
        set destination patch-here
        set departure-time random 50
        set is-moving false
        set company-id random 5
        set k matrix:get company_coef company-id 0
        set m matrix:get company_coef company-id 1
        set color item company-id company_color 
        matrix:set company_vals company-id 3 ((matrix:get company_vals company-id 3) + 1)
        set platoonID 0
        set platoonDelay 0
        if display-departure-times
        [
          set label departure-time
        ]
        while [origin = destination]
          [ set destination one-of patches with [pcolor = blue] ]
        if display-labels
        [
          ask origin
          [
            set plabel "origin"
          ]
          ask destination
          [
            set plabel "destination"
          ]
        ]
      ]
    ]
  ]
  set tick-counter 0
  set cycle-counter 0
  set time-spent 0
  set fuel-spent 0
  set money-spent 0
  set is-platooning false
  set n-platoons 0
  set n-trucks-in-platoon 0
  reset-ticks
  find-shortest-path
end